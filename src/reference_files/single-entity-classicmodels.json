{
	"title": "ClassicModels - Single Entity",
	"type": "sql",
	"database": "ClassicModels",
	"questions": [
		{
			"number": 1,
			"text": "Prepare a list of offices sorted by country, state, city.",
			"solution_query": "SELECT country, state, city FROM Offices ORDER BY country, state, city"
		},
		{
			"number": 2,
			"text": "How many employees are there in the company?",
			"solution_query": "SELECT COUNT(employeeNumber) FROM Employees"
		},
		{
			"number": 3,
			"text": "What is the total of payments received?",
			"solution_query": "SELECT SUM(amount) FROM Payments"
		},
		{
			"number": 4,
			"text": "List the product lines that contain 'Cars'.",
			"solution_query": "SELECT productLine FROM ClassicModels.ProductLines WHERE productLine REGEXP 'Cars'"
		},
		{
			"number": 5,
			"text": "Report total payments for October 28, 2004.",
			"solution_query": "SELECT SUM(amount) FROM Payments WHERE paymentDate = '2004-10-28'"
		},
		{
			"number": 6,
			"text": "Report those payments greater than $100,000.",
			"solution_query": "SELECT amount FROM Payments WHERE amount > 100000"
		},
		{
			"number": 7,
			"text": "List the products in each product line.",
			"solution_query": "SELECT productLine, productName FROM Products ORDER BY productLine, productName"
		},
		{
			"number": 8,
			"text": "How many products in each product line?",
			"solution_query": "SELECT productLine, COUNT(productCode) FROM Products GROUP BY productLine"
		},
		{
			"number": 9,
			"text": "What is the minimum payment received?",
			"solution_query": "SELECT MIN(amount) FROM Payments"
		},
		{
			"number": 10,
			"text": "List all payments greater than twice the average payment.",
			"solution_query": "SELECT amount FROM Payments WHERE amount > 2*(SELECT AVG(amount) FROM Payments)"
		},
		{
			"number": 11,
			"text": "What is the average percentage markup of the MSRP on buyPrice?",
			"solution_query": "SELECT AVG(MSRP/buyPrice)*100 - 100 from Products"
		},
		{
			"number": 12,
			"text": "How many distinct products does ClassicModels sell?",
			"solution_query": "SELECT COUNT(DISTINCT(productCode)) FROM Products"
		},
		{
			"number": 13,
			"text": "Report the name and city of customers who don't have sales representatives?",
			"solution_query": "SELECT city, customerName FROM Customers WHERE salesRepEmployeeNumber IS NULL"
		},
		{
			"number": 14,
			"text": "What are the names of executives with VP or Manager in their title? Use the CONCAT function to combine the employee's first name and last name into a single field for reporting.",
			"solution_query": "SELECT CONCAT(firstName, \" \", lastName) FROM Employees WHERE jobTitle REGEXP 'VP|Manager'"
		},
		{
			"number": 15,
			"text": "Which orders have a value greater than $5,000?",
			"solution_query": "SELECT orderNumber AS `Order number`, FORMAT(SUM(quantityOrdered*priceEach),2) AS `Order value` FROM OrderDetails GROUP BY orderNumber HAVING SUM(quantityOrdered*priceEach) > 5000"
		}
	]
}
