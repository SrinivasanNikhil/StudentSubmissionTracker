<div class="container">
    <nav aria-label="breadcrumb" class="mb-4">
        <ol class="breadcrumb">
            <li class="breadcrumb-item"><a href="/admin">Admin Dashboard</a></li>
            <li class="breadcrumb-item active" aria-current="page">Instructor Management</li>
        </ol>
    </nav>

    <h1 class="mb-4">Instructor Management</h1>

    <div class="card mb-4">
        <div class="card-header d-flex justify-content-between align-items-center">
            <h5 class="mb-0">Create New Instructor</h5>
            <button class="btn btn-primary btn-sm" data-bs-toggle="modal" data-bs-target="#createInstructorModal">
                <i class="bi bi-plus-circle me-1"></i> Add Instructor
            </button>
        </div>
        <div class="card-body">
            <p class="text-muted mb-0">Create new instructor accounts or promote existing users to instructors.</p>
        </div>
    </div>

    <div class="card">
        <div class="card-header d-flex justify-content-between align-items-center">
            <h5 class="mb-0">Instructors (<%= totalInstructors %>)</h5>
            <div class="btn-group" role="group" aria-label="Export options">
                <a href="/admin/export/instructors" class="btn btn-sm btn-outline-primary"
                    title="Export Instructor Data">
                    <i class="bi bi-download me-1"></i> Export
                </a>
            </div>
        </div>
        <div class="card-body p-0">
            <div class="table-responsive">
                <table class="table table-striped table-hover mb-0">
                    <thead class="table-light">
                        <tr>
                            <th>ID</th>
                            <th>Email</th>
                            <th>Name</th>
                            <th>Instructor Code</th>
                            <th>Students</th>
                            <th>Course Sections</th>
                            <th>Registered</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        <% if (instructors.length===0) { %>
                            <tr>
                                <td colspan="8" class="text-center py-4">No instructors found</td>
                            </tr>
                            <% } else { %>
                                <% instructors.forEach(instructor=> { %>
                                    <tr>
                                        <td>
                                            <%= instructor.id %>
                                        </td>
                                        <td>
                                            <%= instructor.email %>
                                        </td>
                                        <td>
                                            <% if (instructor.firstName || instructor.lastName) { %>
                                                <%= instructor.firstName || '' %>
                                                    <%= instructor.lastName || '' %>
                                                        <% } else { %>
                                                            <span class="text-muted">Not provided</span>
                                                            <% } %>
                                        </td>
                                        <td>
                                            <code
                                                class="bg-light px-2 py-1 rounded"><%= instructor.instructorCode %></code>
                                        </td>
                                        <td>
                                            <span class="badge bg-info">
                                                <%= instructor.dataValues.studentCount || 0 %>
                                            </span>
                                        </td>
                                        <td>
                                            <span class="badge bg-warning">
                                                <%= instructor.dataValues.courseSectionCount || 0 %>
                                            </span>
                                        </td>
                                        <td>
                                            <%= new Date(instructor.createdAt).toLocaleDateString() %>
                                        </td>
                                        <td>
                                            <div class="btn-group" role="group">
                                                <button class="btn btn-sm btn-outline-primary view-students"
                                                    data-instructor-id="<%= instructor.id %>"
                                                    data-instructor-name="<%= instructor.firstName || instructor.email %>"
                                                    title="View Students">
                                                    <i class="bi bi-people"></i>
                                                </button>
                                                <button class="btn btn-sm btn-outline-success view-courses"
                                                    data-instructor-id="<%= instructor.id %>"
                                                    data-instructor-name="<%= instructor.firstName || instructor.email %>"
                                                    title="View Course Sections">
                                                    <i class="bi bi-book"></i>
                                                </button>
                                                <button class="btn btn-sm btn-outline-danger delete-instructor"
                                                    data-id="<%= instructor.id %>" data-email="<%= instructor.email %>"
                                                    title="Delete Instructor">
                                                    <i class="bi bi-trash"></i>
                                                </button>
                                            </div>
                                        </td>
                                    </tr>
                                    <% }); %>
                                        <% } %>
                    </tbody>
                </table>
            </div>
        </div>

        <% if (totalPages> 1) { %>
            <div class="card-footer d-flex justify-content-center">
                <nav aria-label="Instructor pagination">
                    <ul class="pagination mb-0">
                        <li class="page-item <%= currentPage === 1 ? 'disabled' : '' %>">
                            <a class="page-link" href="/admin/instructors?page=1&limit=<%= limit %>" aria-label="First">
                                <span aria-hidden="true">&laquo;&laquo;</span>
                            </a>
                        </li>
                        <li class="page-item <%= currentPage === 1 ? 'disabled' : '' %>">
                            <a class="page-link"
                                href="/admin/instructors?page=<%= currentPage - 1 %>&limit=<%= limit %>"
                                aria-label="Previous">
                                <span aria-hidden="true">&laquo;</span>
                            </a>
                        </li>

                        <% let startPage=Math.max(1, currentPage - 2); let endPage=Math.min(totalPages, startPage + 4);
                            if (endPage - startPage < 4) { startPage=Math.max(1, endPage - 4); } for (let i=startPage; i
                            <=endPage; i++) { %>
                            <li class="page-item <%= i === currentPage ? 'active' : '' %>">
                                <a class="page-link" href="/admin/instructors?page=<%= i %>&limit=<%= limit %>">
                                    <%= i %>
                                </a>
                            </li>
                            <% } %>

                                <li class="page-item <%= currentPage === totalPages ? 'disabled' : '' %>">
                                    <a class="page-link"
                                        href="/admin/instructors?page=<%= currentPage + 1 %>&limit=<%= limit %>"
                                        aria-label="Next">
                                        <span aria-hidden="true">&raquo;</span>
                                    </a>
                                </li>
                                <li class="page-item <%= currentPage === totalPages ? 'disabled' : '' %>">
                                    <a class="page-link"
                                        href="/admin/instructors?page=<%= totalPages %>&limit=<%= limit %>"
                                        aria-label="Last">
                                        <span aria-hidden="true">&raquo;&raquo;</span>
                                    </a>
                                </li>
                    </ul>
                </nav>
            </div>
            <% } %>
    </div>
</div>

<!-- Create Instructor Modal -->
<div class="modal fade" id="createInstructorModal" tabindex="-1" aria-labelledby="createInstructorModalLabel"
    aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="createInstructorModalLabel">Create New Instructor</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form id="createInstructorForm">
                <div class="modal-body">
                    <div class="mb-3">
                        <label for="email" class="form-label">Email Address</label>
                        <input type="email" class="form-control" id="email" name="email" required>
                    </div>
                    <div class="mb-3">
                        <label for="firstName" class="form-label">First Name</label>
                        <input type="text" class="form-control" id="firstName" name="firstName">
                    </div>
                    <div class="mb-3">
                        <label for="lastName" class="form-label">Last Name</label>
                        <input type="text" class="form-control" id="lastName" name="lastName">
                    </div>
                    <div class="mb-3">
                        <label for="password" class="form-label">Password</label>
                        <input type="password" class="form-control" id="password" name="password" required>
                        <div class="form-text">The instructor will use this password to log in.</div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-primary">Create Instructor</button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Delete Instructor Confirmation Modal -->
<div class="modal fade" id="deleteInstructorModal" tabindex="-1" aria-labelledby="deleteInstructorModalLabel"
    aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="deleteInstructorModalLabel">Confirm Deletion</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>Are you sure you want to delete the instructor <strong id="deleteInstructorEmail"></strong>?</p>
                <p class="text-danger">This will permanently delete the instructor account and all associated data.
                    Students associated with this instructor will be unassigned. This action cannot be undone.</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <form id="deleteInstructorForm" method="POST">
                    <button type="submit" class="btn btn-danger">Delete Instructor</button>
                </form>
            </div>
        </div>
    </div>
</div>

<!-- View Students Modal -->
<div class="modal fade" id="viewStudentsModal" tabindex="-1" aria-labelledby="viewStudentsModalLabel"
    aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="viewStudentsModalLabel">Students for <span id="instructorName"></span></h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div id="studentsList">
                    <div class="text-center">
                        <div class="spinner-border" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- View Course Sections Modal -->
<div class="modal fade" id="viewCourseSectionsModal" tabindex="-1" aria-labelledby="viewCourseSectionsModalLabel"
    aria-hidden="true">
    <div class="modal-dialog modal-xl">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="viewCourseSectionsModalLabel">Course Sections for <span
                        id="courseInstructorName"></span></h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div id="courseSectionsList">
                    <div class="text-center">
                        <div class="spinner-border" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- View Course Section Students Modal -->
<div class="modal fade" id="viewCourseSectionStudentsModal" tabindex="-1"
    aria-labelledby="viewCourseSectionStudentsModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="viewCourseSectionStudentsModalLabel">Students for <span
                        id="courseSectionName"></span></h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div id="courseSectionStudentsList">
                    <div class="text-center">
                        <div class="spinner-border" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', () => {
        // Set up modals
        const createModal = new bootstrap.Modal(document.getElementById('createInstructorModal'));
        const deleteModal = new bootstrap.Modal(document.getElementById('deleteInstructorModal'));
        const viewStudentsModal = new bootstrap.Modal(document.getElementById('viewStudentsModal'));
        const viewCourseSectionsModal = new bootstrap.Modal(document.getElementById('viewCourseSectionsModal'));
        const viewCourseSectionStudentsModal = new bootstrap.Modal(document.getElementById('viewCourseSectionStudentsModal'));

        const deleteInstructorEmail = document.getElementById('deleteInstructorEmail');
        const deleteInstructorForm = document.getElementById('deleteInstructorForm');
        const instructorName = document.getElementById('instructorName');
        const studentsList = document.getElementById('studentsList');
        const courseInstructorName = document.getElementById('courseInstructorName');
        const courseSectionsList = document.getElementById('courseSectionsList');
        const courseSectionName = document.getElementById('courseSectionName');
        const courseSectionStudentsList = document.getElementById('courseSectionStudentsList');

        // Create instructor form
        document.getElementById('createInstructorForm').addEventListener('submit', async (e) => {
            e.preventDefault();

            const formData = new FormData(e.target);
            const data = Object.fromEntries(formData.entries());

            try {
                const response = await fetch('/admin/instructors', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-Requested-With': 'XMLHttpRequest'
                    },
                    body: JSON.stringify(data)
                });

                const result = await response.json();

                if (result.success) {
                    createModal.hide();
                    window.location.reload();
                } else {
                    alert(result.message || 'Failed to create instructor');
                }
            } catch (error) {
                console.error('Error creating instructor:', error);
                alert('An error occurred while creating the instructor');
            }
        });

        // Delete instructor
        document.querySelectorAll('.delete-instructor').forEach(button => {
            button.addEventListener('click', () => {
                const instructorId = button.getAttribute('data-id');
                const instructorEmail = button.getAttribute('data-email');

                deleteInstructorEmail.textContent = instructorEmail;
                deleteInstructorForm.action = `/admin/instructors/${instructorId}/delete`;
                deleteModal.show();
            });
        });

        // Handle delete form submit
        deleteInstructorForm.addEventListener('submit', async (e) => {
            e.preventDefault();

            try {
                const response = await fetch(deleteInstructorForm.action, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-Requested-With': 'XMLHttpRequest'
                    }
                });

                const result = await response.json();

                if (result.success) {
                    deleteModal.hide();
                    window.location.reload();
                } else {
                    alert(result.message || 'Failed to delete instructor');
                }
            } catch (error) {
                console.error('Error deleting instructor:', error);
                alert('An error occurred while deleting the instructor');
            }
        });

        // View students
        document.querySelectorAll('.view-students').forEach(button => {
            button.addEventListener('click', async () => {
                const instructorId = button.getAttribute('data-instructor-id');
                const instructorNameText = button.getAttribute('data-instructor-name');

                instructorName.textContent = instructorNameText;
                studentsList.innerHTML = '<div class="text-center"><div class="spinner-border" role="status"><span class="visually-hidden">Loading...</span></div></div>';
                viewStudentsModal.show();

                try {
                    const response = await fetch(`/admin/instructors/${instructorId}/students`);
                    const result = await response.json();

                    if (result.success) {
                        if (result.students.length === 0) {
                            studentsList.innerHTML = '<p class="text-muted text-center">No students associated with this instructor.</p>';
                        } else {
                            const studentsHtml = result.students.map(student => `
                            <div class="d-flex justify-content-between align-items-center p-2 border-bottom">
                                <div>
                                    <strong>${student.email}</strong>
                                    ${student.firstName || student.lastName ? `<br><small class="text-muted">${student.firstName || ''} ${student.lastName || ''}</small>` : ''}
                                </div>
                                <small class="text-muted">Registered: ${new Date(student.createdAt).toLocaleDateString()}</small>
                            </div>
                        `).join('');
                            studentsList.innerHTML = studentsHtml;
                        }
                    } else {
                        studentsList.innerHTML = '<p class="text-danger text-center">Failed to load students.</p>';
                    }
                } catch (error) {
                    console.error('Error loading students:', error);
                    studentsList.innerHTML = '<p class="text-danger text-center">An error occurred while loading students.</p>';
                }
            });
        });

        // View course sections
        document.querySelectorAll('.view-courses').forEach(button => {
            button.addEventListener('click', async () => {
                const instructorId = button.getAttribute('data-instructor-id');
                const instructorNameText = button.getAttribute('data-instructor-name');

                courseInstructorName.textContent = instructorNameText;
                courseSectionsList.innerHTML = '<div class="text-center"><div class="spinner-border" role="status"><span class="visually-hidden">Loading...</span></div></div>';
                viewCourseSectionsModal.show();

                try {
                    const response = await fetch(`/admin/instructors/${instructorId}/course-sections`);
                    const result = await response.json();

                    if (result.success) {
                        if (result.courseSections.length === 0) {
                            courseSectionsList.innerHTML = '<p class="text-muted text-center">No course sections found for this instructor.</p>';
                        } else {
                            const courseSectionsHtml = result.courseSections.map(section => `
                            <div class="card mb-3">
                                <div class="card-header d-flex justify-content-between align-items-center">
                                    <h6 class="mb-0">${section.displayName}</h6>
                                    <span class="badge ${section.isActive ? 'bg-success' : 'bg-secondary'}">${section.isActive ? 'Active' : 'Inactive'}</span>
                                </div>
                                <div class="card-body">
                                    <div class="row">
                                        <div class="col-md-6">
                                            <p><strong>Course:</strong> ${section.courseCode} - ${section.courseName}</p>
                                            <p><strong>Section:</strong> ${section.sectionCode}</p>
                                            <p><strong>Semester:</strong> ${section.semester} ${section.academicYear}</p>
                                        </div>
                                        <div class="col-md-6">
                                            <p><strong>Students:</strong> <span class="badge bg-info">${section.studentCount}</span></p>
                                            <p><strong>Created:</strong> ${new Date(section.createdAt).toLocaleDateString()}</p>
                                            <button class="btn btn-sm btn-outline-primary view-course-students"
                                                data-instructor-id="${instructorId}"
                                                data-section-id="${section.id}"
                                                data-section-name="${section.displayName}">
                                                <i class="bi bi-people"></i> View Students
                                            </button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        `).join('');
                            courseSectionsList.innerHTML = courseSectionsHtml;

                            // Add event listeners for course section student buttons
                            document.querySelectorAll('.view-course-students').forEach(btn => {
                                btn.addEventListener('click', async () => {
                                    const sectionId = btn.getAttribute('data-section-id');
                                    const sectionName = btn.getAttribute('data-section-name');

                                    courseSectionName.textContent = sectionName;
                                    courseSectionStudentsList.innerHTML = '<div class="text-center"><div class="spinner-border" role="status"><span class="visually-hidden">Loading...</span></div></div>';
                                    viewCourseSectionStudentsModal.show();

                                    try {
                                        const studentResponse = await fetch(`/admin/instructors/${instructorId}/course-sections/${sectionId}/students`);
                                        const studentResult = await studentResponse.json();

                                        if (studentResult.success) {
                                            if (studentResult.students.length === 0) {
                                                courseSectionStudentsList.innerHTML = '<p class="text-muted text-center">No students registered for this course section.</p>';
                                            } else {
                                                const studentsHtml = studentResult.students.map(student => `
                                                <div class="d-flex justify-content-between align-items-center p-2 border-bottom">
                                                    <div>
                                                        <strong>${student.email}</strong>
                                                        ${student.firstName || student.lastName ? `<br><small class="text-muted">${student.firstName || ''} ${student.lastName || ''}</small>` : ''}
                                                        ${student.academicYear && student.semester ? `<br><small class="text-muted">${student.semester} ${student.academicYear}</small>` : ''}
                                                    </div>
                                                    <small class="text-muted">Registered: ${new Date(student.createdAt).toLocaleDateString()}</small>
                                                </div>
                                            `).join('');
                                                courseSectionStudentsList.innerHTML = studentsHtml;
                                            }
                                        } else {
                                            courseSectionStudentsList.innerHTML = '<p class="text-danger text-center">Failed to load students.</p>';
                                        }
                                    } catch (error) {
                                        console.error('Error loading course section students:', error);
                                        courseSectionStudentsList.innerHTML = '<p class="text-danger text-center">An error occurred while loading students.</p>';
                                    }
                                });
                            });
                        }
                    } else {
                        courseSectionsList.innerHTML = '<p class="text-danger text-center">Failed to load course sections.</p>';
                    }
                } catch (error) {
                    console.error('Error loading course sections:', error);
                    courseSectionsList.innerHTML = '<p class="text-danger text-center">An error occurred while loading course sections.</p>';
                }
            });
        });
    });
</script>